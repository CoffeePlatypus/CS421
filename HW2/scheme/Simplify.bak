
(define (simplify exp)
  (cond ((number? exp) exp)
        ((equal? "ERROR" exp) exp)
        ((symbol? exp) exp)
        ( else (operate (car exp) (cadr exp) (caddr exp)))))

(define (operate op exp1 exp2)
  (cond ((equal? exp1 "ERROR") "ERROR")
        ((equal? exp2 "ERROR") "ERROR")
        ((equal? '+ op) (add (simplify exp1) (simplify exp2)))
        ((equal? '- op) (minus (simplify exp1) (simplify exp2)))
        ((equal? '/ op) (divide (simplify exp1) (simplify exp2)))
        ((equal? '* op) (multiply (simplify exp1) (simplify exp2)))))

(define (zeroo? exp)
  (equal? exp 0))

(define (add exp1 exp2)
  (cond ((equal? "ERROR" exp1) exp1)
        ((equal? "ERROR" exp2) exp2)
        ((zeroo? exp1) exp2)
        ((zeroo? exp2) exp1)
        ((and (number? exp1) (number? exp2)) (+ exp1 exp2))
        ((and (number? exp1) (symbol? exp2)) (list '+ exp2 exp1))
        ((and (symbol? exp1) (number? exp2)) (list '+ exp1 exp2))
        (else (list '+ exp1 exp2)))) ;wrong

(define (minus exp1 exp2)
  (cond ((equal? "ERROR" exp1) exp1)
        ((equal? "ERROR" exp2) exp2)
        ((equal? exp1 exp2) 0)
        ((zeroo? exp2) exp1)
        ((and (number? exp1) (number? exp2)) (- exp1 exp2))
        (else (list '- exp1 exp2))))

(define (divide exp1 exp2)
  
        

(simplify '(-(+ 0 a) a)) 

         
       


  
       