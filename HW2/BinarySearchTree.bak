;binay search tree
(define (bst-create-empty)
  '())

(define (bst-create root left right)
  (list root left right))

;(bst-create 3 '(2 () ()) '())


;insert
(define (bst-insert bst f x)
  (cond ((equal? bst '()) (bst-create x (bst-create-empty) (bst-create-empty)))
        ((f (car bst) x) (bst-insert-left bst f x))
        (else (bst-insert-right bst f x))))
  
(define (bst-insert-left bst f x)
  (cond ((equal? (cadr bst) '()) (list (car bst) x (caddr bst))) 
        (else (list (car bst) (bst-insert (cadr bst) f x) (caddr bst))))) ;insert on left child of bst

(define (bst-insert-right bst f x)
  (cond ((equal? (caddr bst) '()) (list (car bst) (cadr bst) x)) 
        (else (list (car bst) (cadr bst) (bst-insert (caddr bst) f x)))))
;insert



(bst-insert (bst-insert (bst-create-empty) < 1) > 3)